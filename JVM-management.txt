JVM management 

seeing JVm compilation logs  

-XX:+UnlockDiagnosticVMOptions 
-XX:LogCompilation

code cash  , hold level 4 (native code) 

max size is 64 MB  

remaining codecash space 

-XX:+PrintCodeCache


-XX:InitialCodeCacheSize --> initial size when JVM starts for code cache

-XX:ReservedCodeCacheSize --> Max code cache size 

-XX:CodeCacheExpansionSize --> size Increments cache its going to grow up to the  ReservedCodeCacheSize

values can be provided on begabytes kylobytes gigabytes ( m , k , g) 

jconsole can be used to monitor code cache

forwindows jcosole looks for USER/AppData/Local/Temp/hsperfdata_USER provide write access

C1 copiler  , client compiler -- consentrate in startup performance 
C2 compiler , server compiler --> long lived  --> optimized over time 

-client --> specified to run only C1 compiler , will add less overhead as well no native code compilation will happend , incresing startup time 

other flags

-server
-db64 
-XX:-TierCompilation ---> turnoff tiered compilation  , good for very piece of code 
-server

Stack  , ---_ very effiient Java stucture  , the stack its composed of mutiple stacks  , every thread will have its own stack 

holds short libed variables 

limited to a thread 
First In last Out 


https://www.udemy.com/course/java-application-performance-and-memory-management/learn/lecture/13841356#overview

Heap  long lived complex objects  , can be access by multiple threads

variables holds a reference to an object on the stack  

local variables  are only stored on the stack  and hold value itself and does't point to a object on heap

Sample to avoid escape reference

//when returning an object return copy of the object  

public Map<String, Customer> getCustomers() {
		return Map.copyOf(records); // java 10 and up 
		//return Collections.unmodifiableMap(records);
	}
	
//when creating a new object with the constructor or when doing a set


public Book(int id, String title, String author, Double price) {
		this.id = id;
		this.title = title;
		this.author = author;
		this.price = new Price(price);
	}
	
public void setPrice(Double price) {
		this.price = new Price(price);
	}


all the primitives are inmutable 


Metaspace  , utilize to store metadata of classes , methods 
example which method should be compiled in native code  

out oif reach from developer  

static varaibles store on the metaspace  
variables on metaspace are not garbage collected and can be access by any thread ( method object during runtime)

metaspace stating from java 8   , java 7 used PermGen

JVM does operations more complicated  , althoug developer does not have direct control of creating objects on the stack  , the JVM can take this desition for optimization purposes
example small string 

string pool  -> HashMap on heap dedicated for small string 

String pool sample  

Integer i =76 
String three =  i.toString().intern() --> intern will place calculated string on the string pool  , this is not required for smaller strings

JVM Tuning 

-XX:PrintStringTableStatistics --> shows Hash map string pool statistics  (StringTable Statistics)

-XX:StringTableSize ---> increase amount of buckets on string pool 

-XX:+UnlockDiagnosticsVMOptions -XX:+PringFlagsFinal --> provide information of the JVM in bytes

after running above you can find out information such as heapsize  

MaxHeapSize

InitialHeapSize

bytes ->MB converter https://www.gbmb.org/bytes-to-mb 

-XX:MaxHeapSize=600m -XX:MaxHeapSize=1g  increase max heap size 


Garbage collections 
Any onject on the heap which cannot be reached through a reference from the stack (or metaspace)   is elegible from garbage collection  

metaspace reference are never loss 

System.gc(); will suggest JVm to run Garbage collection  its not a direct cmd 

its not recomended to use  , best option is to allow JVM to deside  , since GC impact performance  

only moment you can run is when trying to evalua a code block even then its not suggested

Java 8  -->  JVM will reserve heap memory will never go down  bellow the Xmx

Java 11 --> JVM will dynamically release memory to OS if its not needed  , will not go bellow Xms


finalize() method 
finalize will run before the object is elegible for  garbage collection   , very impredictable  method 
 , never know if the method its going to be run
 can affect gc performance
 
soft leaks  - object remains referenced whrn no longer needed 

VisualVM  jdk 8  

GraalVm jdk 9 and up 

Generating heapdump  

-XX:+HeapDumpOnOutOfMemoryError
-XX:HeapDumpPath=somefilepath

Eclipse Memory Analyser  ,  Leak suspect report 

Garbage collectors concepts  

Mark and sweep 

all threads in application its paused  

follows all object reference from the stack and mark them 

object not been mark all free 

move all refference object in a single memory block which allows to avoid fragmentation in memory


Generational garbage collection  

heap divided in different sections 

young geenerations

  small in size and hold showt lived objects  

  minor collection , will not have notisable impact 
  
      Eden 
	  
	  S0
	  
	  S1 


old generation   

  if object survive multiple collection it will move to old geenration

  mayor collection   , since space biger will take longer  , can have notisable impact 
  
  
enableling garbage collection  

-verbose:gc
 minor gc / reason /    before  after total heap 
[GC (Allocation Failure)  5168K ->4576K(9216K)] 

 full gc  / reason /    before  after total heap
[Full GC (Ergonomics)  5168K ->4576K(9216K)]  

JVM will dynamically resize the eden and survivos spaced  

-XX:-UseAdaptiveSizePolicy  , Turn off hrapallocation resizing , 

tunning old generation 

	-XX:NewRation=n  how many times bigger the old generation its going to be than the young generation

	    example  -XX:NewRation=4  , old generation will be 4 times bigger than young 

        -XX:NewRation=1 old and young will be split equally 

    -XX:survivorRatio=n  , how much of the survivor spaced will be taken by  S0 and S1 from the youn generation 

       example  
	  
       -XX:survivorRatio=8  , survivor will be  1/8 of the youg generation

    -X:MaxTenuringThresholg=n  --> how many generation an object survive before it can go to old generatio , optimally we want this to be as high as possibel since we want object to stay on young generation 

    -X:MaxTenuringThresholg=15 maximun value  
	
Choosing Garbage collector 

    Types of collectors 
	   
	   Serial --> -XX:+useSerialGC
	   
	   Parallel (throughput collector) default collectot jdk 8 and bellow --> multiple threads running the garbage collector 
	                                     
	   
	   Mostly Concurrent  -->app not paused while the application its running ( not really) / ususallu does the marking and then free objects -XX:UseParalledGC

       default on jdk 9 and up 	   
	   
	   -XX:+UseConcMarkSweepGC
	   -XX:+UseG1GC
	                      

 
G1 garballe collector 
 
 optimizes mayor collections  ,can dinamically do partial collection on old generation
 can dynamically allocate to the heap different parts of old and young generation  to prioritize performance 
 
 -XX:ConcGCThreads=n limit other threads 
 
 -XX:InitiatingHeapOccupancyPercent=n  / default 45% / tell at which porcentage JVM G1 uses garbage collection 
 

String deduplication  / required G1 garbage collections   --> allow garbage collection change the refference for duplicate strings  , by using hashcode  / additional header bnut it can be usefull

Java Mission Control profiler 

To unlock flicht recorder insert following flags 
oracle jdk   -XX:UnlockCommertialFeatures -XX+FlightRecorder 
open jdk     -XX:UnlockCommertialFeatures -XX+FlightRecorder 


destination File : destination were flight recorder its going to store files
Name: Name of the recording 

Time fixed recorder : allows to record for a fixed amount of time  

Continuous recording : allow to record continuosly  , data will be store on memory 
  Since memory is finite , you can specify Maximun size and Maximun age before recorder stops
  
event settings : select how intensive the profiling will be the profiling  
                 Continuous -on server : has less overhead , suited for prod environments
				 Profiling- on server  : has more overhead  ,provides more granular info

start flight recorder from the JVM paramethers 

-XX:StartFlightRecording=delay=2min,duration=60s,name=Test,filename=recording.jfr,settings=profile